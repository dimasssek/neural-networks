# 1
# Дана строка. Отформатировать по след правилам
# 1. в начале и в конце не должно быть пробелов
# 2. все слова должны быть разделены одним пробелом
# 3. точки и запятые пишутся слитно с предыдущим словом
# 4. после знака препинания ставится пробел
#
# 2
# Дана строка. Определить является ли она палиндромом, при условии что
# заглавные и строчные буквы не различимы
# все символы, не являющиеся буквами, должны быть пропущены
#
# 3
# Дана строка. Определить, какое наименьшее число символов необходимо
# записать дописать к ней справа так, чтобы она стала палиндромом

def read_data():
    parties = []
    votes = []
    
    while True:
        line = input().strip()
        if line == 'PARTIES':
            continue
        elif line == 'VOTES':
            break
        elif not parties:
            parties = line.split()
        else:
            votes.extend(line.split())

    return parties, votes

def calculate_percentages(parties, votes):
    vote_count = len(votes)
    party_votes = {party: 0 for party in parties}

    for vote in votes:
        party_votes[vote] += 1

    party_percentages = {party: (votes / vote_count) * 100 for party, votes in party_votes.items()}
    return party_percentages

def filter_parties_by_threshold(party_percentages, threshold=7):
    eligible_parties = [party for party, percentage in party_percentages.items() if percentage >= threshold]
    return eligible_parties

def main():
    parties, votes = read_data()
    party_percentages = calculate_percentages(parties, votes)
    eligible_parties = filter_parties_by_threshold(party_percentages)

    with open('output.txt', 'w') as output_file:
        for party in eligible_parties:
            output_file.write(party + '\n')

if __name__ == '__main__':
    main()



def read_data():
    parties = []
    votes = []

    with open('input.txt', 'r') as input_file:
        lines = input_file.readlines()

    reading_parties = False
    reading_votes = False
    for line in lines:
        line = line.strip()
        if line == 'PARTIES':
            reading_parties = True
            continue
        elif line == 'VOTES':
            reading_votes = True
            reading_parties = False
            continue
        
        if reading_parties:
            parties = line.split()
        elif reading_votes:
            votes.extend(line.split())

    return parties, votes









class Vector3D:
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z

    def __str__(self):
        """Возвращает строковое представление вектора."""
        return f"({self.x}, {self.y}, {self.z})"

    def __add__(self, other):
        """Складывает два вектора и возвращает новый вектор."""
        return Vector3D(self.x + other.x, self.y + other.y, self.z + other.z)

    def __sub__(self, other):
        """Вычитает один вектор из другого и возвращает новый вектор."""
        return Vector3D(self.x - other.x, self.y - other.y, self.z - other.z)

    def dot(self, other):
        """Вычисляет скалярное произведение двух векторов."""
        return self.x * other.x + self.y * other.y + self.z * other.z

    def __mul__(self, scalar):
        """Умножает вектор на скаляр и возвращает новый вектор."""
        return Vector3D(self.x * scalar, self.y * scalar, self.z * scalar)

    def __truediv__(self, scalar):
        """Делит вектор на скаляр и возвращает новый вектор."""
        return Vector3D(self.x / scalar, self.y / scalar, self.z / scalar)

    def cross(self, other):
        """Вычисляет векторное произведение двух векторов и возвращает новый вектор."""
        return Vector3D(
            self.y * other.z - self.z * other.y,
            self.z * other.x - self.x * other.z,
            self.x * other.y - self.y * other.x
        )

    def length(self):
        """Вычисляет длину вектора."""
        return (self.x**2 + self.y**2 + self.z**2)**0.5


# Пример использования
v1 = Vector3D(1, 2, 3)
v2 = Vector3D(4, 5, 6)

print("Вектор 1:", v1)
print("Вектор 2:", v2)
print("Сумма:", v1 + v2)
print("Разность:", v1 - v2)
print("Скалярное произведение:", v1.dot(v2))
print("Умножение на скаляр:", v1 * 2)
print("Деление на скаляр:", v1 / 2)
print("Векторное произведение:", v1.cross(v2))
print("Длина вектора 1:", v1.length())
